name: Telegram Notify

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      LC_ALL: C.UTF-8  # Устанавливаем UTF-8 как локаль для shell
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare Changed Files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Получаем все коммиты из события push
            commits=$(echo '${{ toJson(github.event.commits) }}' | jq -r '.[].id')
            # Первый и последний коммит в push
            first_commit=$(echo "$commits" | head -n 1)
            last_commit="${{ github.sha }}"
            # Состояние main перед первым коммитом в push
            before_push=$(git rev-parse "$first_commit^" 2>/dev/null || echo "")
            if [ -n "$before_push" ]; then
              # Сравниваем main до push с итоговым состоянием
              diff_files=$(git diff --name-only "$before_push" "$last_commit" 2>/dev/null)
            else
              # Если это первый коммит в репозитории
              diff_files=$(git diff --name-only --root "$first_commit" 2>/dev/null)
            fi
            files=""
            while IFS= read -r line; do
              decoded_line=$(printf '%b' "$line")
              files+="$decoded_line"$'\n'
            done <<< "$diff_files"
            files=$(echo "$files" | sort -u | grep -v '^$')
          else
            # Для pull_request используем все коммиты из PR
            files=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.pull_request._links.commits.href }} | \
              jq -r '.[] | .sha' | xargs -I {} git diff --name-only {}^ {} 2>/dev/null)
            decoded_files=""
            while IFS= read -r line; do
              decoded_line=$(printf '%b' "$line")
              decoded_files+="$decoded_line"$'\n'
            done <<< "$files"
            files="$decoded_files"
            files=$(echo "$files" | sort -u | grep -v '^$')
          fi
          if [ -z "$files" ]; then
            files="Нет измененных файлов"
          fi
          echo "Raw files detected: $files"
          echo "RAW_FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Format Files for Telegram
        id: format-files
        run: |
          echo "Input RAW_FILES: '${{ steps.changed-files.outputs.RAW_FILES }}'"
          formatted_files=""
          echo "${{ steps.changed-files.outputs.RAW_FILES }}" > temp_files.txt
          while IFS= read -r file || [ -n "$file" ]; do
            echo "Processing file: '$file'"
            if [ -n "$file" ] && [ "$file" != "Нет измененных файлов" ] && [ "$file" != ".DS_Store" ]; then
              readable_file="$file"
              encoded_file=$(printf '%s' "$file" | python3 -c "import sys, urllib.parse; print(urllib.parse.quote(sys.stdin.read().strip()))" 2>/dev/null || echo "$file")
              echo "Readable file: '$readable_file'"
              echo "Encoded file: '$encoded_file'"
              formatted_files+="- [$readable_file](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/$encoded_file)"$'\n'
            elif [ "$file" = "Нет измененных файлов" ]; then
              formatted_files="- Нет измененных файлов"
            fi
          done < temp_files.txt
          rm -f temp_files.txt
          formatted_files=$(echo "$formatted_files" | grep -v '^$')
          echo "Formatted files: $formatted_files"
          echo "FORMATTED_FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$formatted_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: /usr/bin/bash {0}

      - name: Send Telegram Message
        if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event_pull_request.merged == true)
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            EVENT_TYPE="Пуш"
          else
            EVENT_TYPE="Мердж"
          fi
          MESSAGE_FILE="telegram_message.txt"
          printf "**%s**\nАвтор: _%s_\n%s в %s для %s\nДокументы:\n%s\nПосмотреть что [%s](https://github.com/%s/commit/%s)" \
            "${{ github.event.commits[0].message || github.event.pull_request.title }}" \
            "${{ github.actor }}" \
            "$EVENT_TYPE" \
            "${{ github.ref_name }}" \
            "${{ github.repository }}" \
            "${{ steps.format-files.outputs.FORMATTED_FILES }}" \
            "изменилось" \
            "${{ github.repository }}" \
            "${{ github.sha }}" > "$MESSAGE_FILE"
          echo "Debug FORMATTED_FILES: ${{ steps.format-files.outputs.FORMATTED_FILES }}"
          echo "Final message:"
          cat "$MESSAGE_FILE"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_TO }}" \
            -d message_thread_id="${{ secrets.TELEGRAM_THREAD_ID }}" \
            -d parse_mode="Markdown" \
            -d text="$(cat "$MESSAGE_FILE")"
          rm -f "$MESSAGE_FILE"
        shell: /usr/bin/bash {0}
